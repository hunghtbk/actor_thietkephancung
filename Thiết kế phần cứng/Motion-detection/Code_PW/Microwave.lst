CCS PCM C Compiler, Version 4.107, 42851               18-Jan-13 10:56

               Filename: D:\data\lab\Motion-detection\Code_PW\Microwave.lst

               ROM used: 348 words (8%)
                         Largest free fragment is 2048
               RAM used: 24 (9%) at main() level
                         27 (11%) worst case
               Stack:    3 worst case (1 in main + 2 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0F5
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  25
0008:  MOVF   7F,W
0009:  MOVWF  24
000A:  MOVF   0A,W
000B:  MOVWF  2B
000C:  CLRF   0A
000D:  SWAPF  24,F
000E:  MOVF   04,W
000F:  MOVWF  26
0010:  MOVF   20,W
0011:  MOVWF  27
0012:  MOVF   21,W
0013:  MOVWF  28
0014:  MOVF   22,W
0015:  MOVWF  29
0016:  MOVF   23,W
0017:  MOVWF  2A
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.4
001B:  GOTO   01E
001C:  BTFSC  0B.1
001D:  GOTO   039
001E:  MOVLW  8C
001F:  MOVWF  04
0020:  BTFSS  00.5
0021:  GOTO   024
0022:  BTFSC  0C.5
0023:  GOTO   03B
0024:  BTFSS  0B.5
0025:  GOTO   028
0026:  BTFSC  0B.2
0027:  GOTO   03D
0028:  MOVF   26,W
0029:  MOVWF  04
002A:  MOVF   27,W
002B:  MOVWF  20
002C:  MOVF   28,W
002D:  MOVWF  21
002E:  MOVF   29,W
002F:  MOVWF  22
0030:  MOVF   2A,W
0031:  MOVWF  23
0032:  MOVF   2B,W
0033:  MOVWF  0A
0034:  SWAPF  25,W
0035:  MOVWF  03
0036:  SWAPF  7F,F
0037:  SWAPF  7F,W
0038:  RETFIE
0039:  BCF    0A.3
003A:  GOTO   047
003B:  BCF    0A.3
003C:  GOTO   0EA
003D:  BCF    0A.3
003E:  GOTO   084
.................... //--------------------------------------------------------- 
.................... // date created:07/11/2012 
.................... // Update: 
.................... // 8/11/2012: chuyen code CW sang PW 
.................... // 
.................... // 
.................... // 
.................... // 
.................... // 
.................... // 
.................... // 
.................... // 
.................... //                         
.................... // 
.................... // 
.................... // 
.................... // 
.................... // author : Nguyen Hung 
.................... // mcu:PIC16f688 
.................... // clock:8Mhz 
.................... // descrip:Use with microwave_boad 
.................... //---------------------------------------------------------- 
....................  
.................... #include <Microwave.h> 
.................... #include <16F688.h> 
.................... //////// Standard Header file for the PIC16F688 device //////////////// 
.................... #device PIC16F688 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES MCLR                     //Master Clear pin enabled 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
....................  
.................... #use delay(clock=8000000) 
.................... #use rs232(baud=19200,parity=N,xmit=PIN_C4,rcv=PIN_C5,bits=8) 
....................  
.................... //#use rs232(baud=19200,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1) 
....................  
.................... //.........Defined........................................ 
.................... //--------------------------------------------------------- 
.................... #define MAX_PULSE_WIDTH 12500    //20Hz 
.................... #define MIN_PULSE_WIDTH 1250     //200Hz 
.................... #define FILTER_VALUE    10 
.................... #define PULSE_ACTIVE    20     // active pulse = 32.7 x PULSE_ACTIVE 
.................... #define PULSE_OFF       21     // off pulse = 32.7 x PULSE_OFF - active pulse 
....................  
....................  
.................... #BYTE PORTA = 0x05 
.................... #BIT RA0 = 0x05.0 
.................... #BIT RA1 = 0x05.1 
.................... #BIT RA2 = 0x05.2 
....................  
.................... #BYTE PORTC = 0x07 
.................... #BIT RC0 = 0x07.0 
.................... #BIT RC1 = 0x07.1 
.................... #BIT RC2 = 0x07.2 
.................... #BIT RC3 = 0x07.3 
.................... #BIT RC4 = 0x07.4 
.................... #BIT RC5 = 0x07.5 
....................  
.................... #BYTE TRISA = 0x85 
.................... #BIT TA0 = 0x85.0 
.................... #BIT TA1 = 0x85.1 
.................... #BIT TA2 = 0x85.2 
....................  
.................... #BYTE TRISC = 0x87 
.................... #BIT TC0 = 0x87.0 
.................... #BIT TC1 = 0x87.1 
.................... #BIT TC2 = 0x87.2 
.................... #BIT TC3 = 0x87.3 
.................... #BIT TC4 = 0x87.4 
.................... #BIT TC5 = 0x87.5 
....................  
.................... //........variable......................................... 
....................  
.................... volatile unsigned int16 timer0_var =0; 
.................... volatile char pulse_count; 
.................... volatile unsigned int32 pulse_sum =0; 
.................... //float frequency,velocity; 
.................... volatile unsigned int led_count =0; 
....................  
.................... //---------------------------------------------------------- 
.................... //...........macro......................................... 
.................... // 
.................... void enable_timer1(void); 
.................... void disable_timer1(void); 
....................  
.................... void IDLE_MODE(void); 
.................... void OFF_MODE(void); 
.................... void ACTIVE_MODE(void); 
.................... void wait(unsigned int16 k); 
....................  
.................... // 
.................... //---------------------------------------------------------- 
.................... //---------interrupt handle funtion------------------------- 
.................... #int_EXT 
.................... void  EXT_isr(void)  
.................... { 
*
0047:  CLRF   38
0048:  CLRF   37
.................... unsigned int16 pulse_buff =0; 
.................... pulse_buff = get_timer1(); 
0049:  MOVF   0F,W
004A:  MOVWF  23
004B:  MOVF   0E,W
004C:  MOVWF  20
004D:  MOVF   0F,W
004E:  SUBWF  23,W
004F:  BTFSS  03.2
0050:  GOTO   049
0051:  MOVF   20,W
0052:  MOVWF  37
0053:  MOVF   23,W
0054:  MOVWF  38
.................... //printf("\r\n %lu \t\t %d \r\n",pulse_buff,pulse_count); 
.................... if(pulse_count == 0) 
0055:  MOVF   2F,F
0056:  BTFSS  03.2
0057:  GOTO   062
....................    { 
....................    enable_timer1(); 
.................... //   enable_interrupts(INT_TIMER1); 
....................    pulse_count++; 
*
005C:  INCF   2F,F
....................    pulse_sum = 0; 
005D:  CLRF   33
005E:  CLRF   32
005F:  CLRF   31
0060:  CLRF   30
....................    } 
.................... else 
0061:  GOTO   081
....................    { 
....................    if(pulse_buff < MIN_PULSE_WIDTH) 
0062:  MOVF   38,W
0063:  SUBLW  04
0064:  BTFSS  03.0
0065:  GOTO   072
0066:  BTFSS  03.2
0067:  GOTO   06C
0068:  MOVF   37,W
0069:  SUBLW  E1
006A:  BTFSS  03.0
006B:  GOTO   072
....................       { 
....................        if(pulse_count>FILTER_VALUE)  
006C:  MOVF   2F,W
006D:  SUBLW  0A
006E:  BTFSC  03.0
006F:  GOTO   070
....................          { 
.................... //         printf("a"); 
....................          } 
....................  //    printf("\r\n %lu \t\t %d \r\n",pulse_buff,pulse_count); 
....................       IDLE_MODE(); 
0070:  CALL   03F
....................       } 
....................    else  
0071:  GOTO   081
....................       { 
....................       pulse_count++ ; 
0072:  INCF   2F,F
....................       pulse_sum+= pulse_buff; 
0073:  MOVF   37,W
0074:  ADDWF  30,F
0075:  MOVF   38,W
0076:  BTFSC  03.0
0077:  INCFSZ 38,W
0078:  ADDWF  31,F
0079:  MOVLW  00
007A:  BTFSC  03.0
007B:  MOVLW  01
007C:  ADDWF  32,F
007D:  MOVLW  00
007E:  BTFSC  03.0
007F:  MOVLW  01
0080:  ADDWF  33,F
....................       } 
....................    } 
.................... } 
0081:  BCF    0B.1
0082:  BCF    0A.3
0083:  GOTO   028
.................... #INT_TIMER0 
.................... void TIMER0_handle(void) 
.................... { 
....................    if(led_count <40) 
0084:  MOVF   34,W
0085:  SUBLW  27
0086:  BTFSS  03.0
0087:  GOTO   0AE
....................    { 
....................       led_count ++; 
0088:  INCF   34,F
....................       if((led_count%3)==0)RC2 ^=1; 
0089:  MOVF   34,W
008A:  MOVWF  37
008B:  MOVLW  03
008C:  MOVWF  38
*
00A1:  MOVF   20,F
00A2:  BTFSS  03.2
00A3:  GOTO   0AD
00A4:  MOVLW  00
00A5:  BTFSC  07.2
00A6:  MOVLW  01
00A7:  XORLW  01
00A8:  MOVWF  21
00A9:  BTFSS  21.0
00AA:  BCF    07.2
00AB:  BTFSC  21.0
00AC:  BSF    07.2
....................    } 
....................    else  
00AD:  GOTO   0B1
....................    { 
....................       RC2 = 0; 
00AE:  BCF    07.2
....................       RC1 = 0; 
00AF:  BCF    07.1
....................       RC0 = 0; 
00B0:  BCF    07.0
....................     
....................    } 
....................    timer0_var++; 
00B1:  INCF   2D,F
00B2:  BTFSC  03.2
00B3:  INCF   2E,F
....................    if(timer0_var == PULSE_ACTIVE)  
00B4:  MOVF   2D,W
00B5:  SUBLW  14
00B6:  BTFSS  03.2
00B7:  GOTO   0C7
00B8:  MOVF   2E,F
00B9:  BTFSS  03.2
00BA:  GOTO   0C7
....................    { 
....................    //process of off mode  
....................    OFF_MODE(); 
....................    } 
....................    else if(timer0_var == PULSE_OFF) 
*
00C6:  GOTO   0E7
00C7:  MOVF   2D,W
00C8:  SUBLW  15
00C9:  BTFSS  03.2
00CA:  GOTO   0E7
00CB:  MOVF   2E,F
00CC:  BTFSS  03.2
00CD:  GOTO   0E7
....................    { 
....................    //process of active mode 
....................    timer0_var = 0; 
00CE:  CLRF   2E
00CF:  CLRF   2D
....................    ACTIVE_MODE(); 
....................    } 
.................... } 
....................  
.................... //!#INT_TIMER1 
.................... //!void TIMER1_handle(void) 
.................... //!{ 
.................... //!if(pulse_count>FILTER_VALUE)  
.................... //!   { 
.................... //!   printf("W"); 
.................... //!   IDLE_MODE(); 
.................... //!   } 
.................... //!} 
....................  
....................  
*
00E7:  BCF    0B.2
00E8:  BCF    0A.3
00E9:  GOTO   028
.................... #int_RDA 
.................... void  RDA_isr(void)  
.................... { 
....................    int8 value; 
....................    value = getc(); 
00EA:  BTFSS  0C.5
00EB:  GOTO   0EA
00EC:  MOVF   14,W
00ED:  MOVWF  37
....................    putc('R'); 
00EE:  MOVLW  52
00EF:  BTFSS  0C.1
00F0:  GOTO   0EF
00F1:  MOVWF  15
.................... } 
....................  
....................  
00F2:  BCF    0C.5
00F3:  BCF    0A.3
00F4:  GOTO   028
.................... void main() 
.................... { 
00F5:  CLRF   04
00F6:  BCF    03.7
00F7:  MOVLW  1F
00F8:  ANDWF  03,F
00F9:  BCF    11.3
00FA:  MOVLW  19
00FB:  MOVWF  13
00FC:  MOVLW  A6
00FD:  MOVWF  16
00FE:  MOVLW  90
00FF:  MOVWF  17
0100:  CLRF   2E
0101:  CLRF   2D
0102:  CLRF   33
0103:  CLRF   32
0104:  CLRF   31
0105:  CLRF   30
0106:  CLRF   34
0107:  BCF    1F.6
0108:  MOVLW  00
0109:  BSF    03.5
010A:  MOVWF  11
010B:  BCF    03.5
010C:  CLRF   1A
010D:  MOVLW  07
010E:  MOVWF  19
....................    setup_comparator(NC_NC_NC_NC);// This device COMP currently not supported by the PICWizard 
010F:  CLRF   1A
0110:  MOVLW  07
0111:  MOVWF  19
0112:  BSF    03.5
0113:  MOVF   05,W
0114:  MOVWF  05
0115:  MOVLW  06
0116:  BCF    03.5
0117:  MOVWF  20
0118:  DECFSZ 20,F
0119:  GOTO   118
011A:  NOP
011B:  MOVF   19,W
011C:  BCF    0C.3
....................   // enable_interrupts(INT_EXT); 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256); //32.7 ms overflow 
011D:  BSF    03.5
011E:  MOVF   01,W
011F:  ANDLW  C0
0120:  IORLW  07
0121:  MOVWF  01
....................    enable_interrupts(INT_TIMER0); 
0122:  BCF    03.5
0123:  BSF    0B.5
....................    enable_interrupts(INT_RDA); 
0124:  BSF    03.5
0125:  BSF    0C.5
....................    //enable_interrupts(INT_TIMER1); 
....................    enable_interrupts(GLOBAL); 
0126:  MOVLW  C0
0127:  BCF    03.5
0128:  IORWF  0B,F
....................    
....................  //  setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);//128ms overflow 
....................  
....................    ext_int_edge( H_TO_L );   // Sets up EXT 
0129:  BSF    03.5
012A:  BCF    01.6
....................    setup_timer_1 (T1_DISABLED ); 
012B:  BCF    03.5
012C:  CLRF   10
.................... //   printf("NguyenHung \n \r DT5 - K53 - DHBKHN \n \r"); 
.................... //   printf("Ready to use !! \n\r "); 
....................     
....................    TC0 = 0; 
012D:  BSF    03.5
012E:  BCF    07.0
....................    TC1 = 0; 
012F:  BCF    07.1
....................    TC2 = 0; 
0130:  BCF    07.2
....................    TC3 = 0; 
0131:  BCF    07.3
....................    RC3 = 0; 
0132:  BCF    03.5
0133:  BCF    07.3
....................    RC2 = 0; 
0134:  BCF    07.2
....................    RC1 = 0; 
0135:  BCF    07.1
....................    RC0 = 0; 
0136:  BCF    07.0
....................  
.................... while(true) 
....................    { 
....................    if(get_timer1() > MAX_PULSE_WIDTH) 
0137:  MOVF   0F,W
0138:  MOVWF  23
0139:  MOVF   0E,W
013A:  MOVWF  20
013B:  MOVF   0F,W
013C:  SUBWF  23,W
013D:  BTFSS  03.2
013E:  GOTO   137
013F:  MOVF   20,W
0140:  MOVWF  35
0141:  MOVF   23,W
0142:  MOVWF  36
0143:  MOVF   36,W
0144:  SUBLW  2F
0145:  BTFSC  03.0
0146:  GOTO   15A
0147:  XORLW  FF
0148:  BTFSS  03.2
0149:  GOTO   14E
014A:  MOVF   35,W
014B:  SUBLW  D4
014C:  BTFSC  03.0
014D:  GOTO   15A
....................       { 
....................          if(pulse_count>FILTER_VALUE)  
014E:  MOVF   2F,W
014F:  SUBLW  0A
0150:  BTFSC  03.0
0151:  GOTO   15A
....................          { 
....................            // frequency = 250000/((float)(pulse_sum/pulse_count)); 
....................            // velocity = frequency /19.49; 
....................            // printf("%f \r\n",(float)(velocity)); 
....................             RC1 = 1; 
0152:  BSF    07.1
....................             RC0 = 1; 
0153:  BSF    07.0
....................             IDLE_MODE(); 
0154:  CALL   03F
....................             led_count =0; 
0155:  CLRF   34
....................             putc('W'); 
0156:  MOVLW  57
0157:  BTFSS  0C.1
0158:  GOTO   157
0159:  MOVWF  15
....................          } 
....................       } 
....................     } 
015A:  GOTO   137
.................... } 
....................  
.................... //------------------------------------------------------------- 
.................... void enable_timer1(void) 
.................... { 
015B:  SLEEP
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);      //262 ms overflow 
*
0058:  MOVLW  35
0059:  MOVWF  10
....................    set_timer1(0);                               //this sets timer1 register to 0 
005A:  CLRF   0F
005B:  CLRF   0E
.................... } 
....................  
.................... void disable_timer1(void) 
.................... { 
....................    set_timer1(0);  
*
00BB:  CLRF   0F
00BC:  CLRF   0E
....................    setup_timer_1 ( T1_DISABLED ); 
00BD:  CLRF   10
.................... } 
.................... void IDLE_MODE(void) 
.................... { 
....................    disable_interrupts(INT_TIMER1); 
*
003F:  BSF    03.5
0040:  BCF    0C.0
.................... //   disable_timer1(); 
....................    set_timer1(0);  
0041:  BCF    03.5
0042:  CLRF   0F
0043:  CLRF   0E
....................    setup_timer_1 ( T1_DISABLED ); 
0044:  CLRF   10
....................    pulse_count =0; 
0045:  CLRF   2F
....................   // pulse_buff =0; 
.................... } 
0046:  RETURN
.................... void OFF_MODE(void) 
.................... { 
....................    disable_timer1 (); 
....................    disable_interrupts(INT_TIMER1); 
*
00BE:  BSF    03.5
00BF:  BCF    0C.0
....................    disable_interrupts(INT_EXT); 
00C0:  BCF    03.5
00C1:  BCF    0B.4
....................     
....................    set_timer1(0); 
00C2:  CLRF   0F
00C3:  CLRF   0E
....................    pulse_count &=0; 
00C4:  CLRF   2F
....................  
....................    RC3 =1 ; 
00C5:  BSF    07.3
....................    } 
.................... void ACTIVE_MODE(void) 
.................... { 
....................    disable_interrupts(INT_TIMER0); 
*
00D0:  BCF    0B.5
....................    RC3 =1 ; 
00D1:  BSF    07.3
....................    wait(0x100);// so luyen: 01686269854 
00D2:  MOVLW  01
00D3:  MOVWF  38
00D4:  CLRF   37
.................... //   wait(0xffff); 
....................    set_timer0(0); 
*
00DE:  CLRF   01
....................    enable_interrupts(INT_TIMER0); 
00DF:  BSF    0B.5
....................    set_timer1(0); 
00E0:  CLRF   0F
00E1:  CLRF   0E
....................    enable_interrupts(INT_EXT); 
00E2:  BSF    0B.4
....................    ext_int_edge( H_TO_L );   // higt to low 
00E3:  BSF    03.5
00E4:  BCF    01.6
....................    pulse_count =0; 
00E5:  BCF    03.5
00E6:  CLRF   2F
....................    } 
.................... void wait(unsigned int16 k) 
.................... { 
.................... while(k--); 
*
00D5:  MOVF   38,W
00D6:  MOVWF  23
00D7:  MOVF   37,W
00D8:  BTFSC  03.2
00D9:  DECF   38,F
00DA:  DECF   37,F
00DB:  IORWF  23,W
00DC:  BTFSS  03.2
00DD:  GOTO   0D5
.................... } 

Configuration Fuses:
   Word  1: 3CF2   HS NOPROTECT NOBROWNOUT MCLR NOCPD NOWDT NOPUT IESO FCMEN
